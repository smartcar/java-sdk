plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    id 'com.adarshr.test-logger' version '2.1.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
}

apply plugin: 'jacoco'

group libGroup
version libVersion

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    jcenter() {
        content {
            includeModule("org.testng", "testng")
        }
    }
}

/**
 * Defines test sets:
 *  - Unit Tests (test)  <-- existing default
 *  - Integration (integration)
 *
 * @plugin org.unbroken-dome.test-sets
 */
testSets {
    integration
}

/**
 * Defines all dependencies.
 *
 * @see https://docs.gradle.org/6.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
    api 'com.google.code.gson:gson:2.8.6'
    api 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'org.apache.commons:commons-text:1.2'
    implementation 'javax.json:javax.json-api:1.0'  // Java EE interfaces
    runtimeOnly 'org.glassfish:javax.json:1.1'      // implementation for above interfaces
    compile 'commons-codec:commons-codec:1.10'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'org.powermock:powermock-release-with-testng-mockito-dependencies:1.6.2'
    testImplementation 'org.testng:testng:7.4.0'

    integrationImplementation 'org.seleniumhq.selenium:selenium-java:3.13.0'
}

/**
 * Generates Javadoc for the SDK.
 *
 * @plugin java
 */
javadoc {
    destinationDir = file('docs')

    options.header = libDescription
    options.windowTitle = "${libName} - ${libVersion}"
    options.addBooleanOption('notimestamp', true)
}

/**
 * Customizes the jar MANIFEST.MF for generated jars.
 *
 * @plugin java
 */
jar {
    manifest {
        attributes('Implementation-Title': libName,
                'Implementation-Version': libVersion)
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/**
 * Configures all test tasks.
 *
 * @plugin com.adarshr.test-logger
 * @plugin java
 */
tasks.withType(Test) {
    useTestNG {
        preserveOrder true
    }

    testlogger {
        theme 'mocha'
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        showFullStackTraces true
    }
}

check.dependsOn integration

/**
 * Configures coverage reporting.
 *
 * @plugin jacoco
 */
jacoco {
    reportsDirectory = file("${buildDir}/reports/coverage")
}

/**
 * Generates coverage reports for the unit tests.
 *
 * @plugin jacoco
 */
jacocoTestReport {
    reports {
        html.enabled = true
        html.destination = file("${buildDir}/reports/coverage/test/html")

        xml.enabled = true
        xml.destination = file("${buildDir}/reports/coverage/test/report.xml")
    }
}

/**
 * Generates coverage reports for the integration tests.
 *
 * @plugin jacoco
 */
jacocoIntegrationReport {
    dependsOn integration

    reports {
        html.enabled = true
        html.destination = file("${buildDir}/reports/coverage/integration/html")

        xml.enabled = true
        xml.destination = file("${buildDir}/reports/coverage/integration/report.xml")
    }
}

/**
 * Generates all coverage reports after running tests.
 *
 * @plugin jacoco
 */
task coverage {
    dependsOn check
    dependsOn jacocoTestReport
    dependsOn jacocoIntegrationReport
}

/**
 * Generates updated markdown documentation using the markdown template files.
 */
task markdown(type: Copy) {
    def date = new Date()
    def licenseYear = date.format('yyyy')

    from './'
    into './'
    include '*.mdt'
    rename '^(.*)\\.mdt$', '$1.md'
    expand(libGroup: libGroup, libName: libName, libVersion: libVersion, year: licenseYear)
    filteringCharset = 'UTF-8'
}

/**
 * Configures packaging of modules/artifacts to publish.
 *
 * @plugin maven-publish
 */
publishing {
    publications {
        main(MavenPublication) {
            from components.java

            artifactId libName

            pom {
                // https://central.sonatype.org/publish/requirements/#sufficient-metadata
                name = libName
                description = 'Java SDK for the Smartcar platform'
                url = 'https://github.com/smartcar/java-sdk'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'smartcar'
                        name = 'Smartcar'
                        email = 'hello@smartcar.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/smartcar/java-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com:smartcar/java-sdk.git'
                    url = 'https://github.com/smartcar/java-sdk.git'
                }
            }
        }
    }

}

/**
 * Requires the following environment variables to be set:
 *  - ORG_GRADLE_PROJECT_sonatypeUsername
 *  - ORG_GRADLE_PROJECT_sonatypePassword
 *
 * @see https://github.com/gradle-nexus/publish-plugin
 */
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl.set uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            stagingProfileId = '117eb260e0ad59'
        }
    }
}

/**
 * Requires the following environment variables to be set:
 *  - ORG_GRADLE_PROJECT_signingKey
 *  - ORG_GRADLE_PROJECT_signingPassword
 *
 * @see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
 */
signing {
    useInMemoryPgpKeys findProperty("signingKey"), findProperty("signingPassword")
    sign publishing.publications.main
}
