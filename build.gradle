apply plugin: 'java'
apply plugin: 'jacoco'

/*
apply plugin: 'com.bmuschko.nexus'

buildscript {
  repositories {
     jcenter()
  }
  dependencies {
     classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
  }
}

modifyPom {
  project {
    name 'java-sdk'
    description 'Java SDK for the Smartcar API'
    url 'https://github.com/smartcar/java-sdk'

    licenses {
      license {
        name 'MIT'
        url 'http://choosealicense.com/licenses/mit/'
        distribution 'repo'
      }
    }

    scm {
      url 'https://github.com/smartcar/java-sdk'
      connecton 'scm:https://smartcar@github.com/smartcar/java-sdk.git'
      developerConnection 'scm:git://github.com/smartcar/java-sdk.git'
    }
  }
}

extraArchive {
  javadoc = true
  sources = false
  tests = false
}
nexus {
  sign = true
  configuration = archives
  // repositoryUrl and snapshotRepositoryUrl have defaults
}
*/

repositories {
  jcenter()
}

dependencies {
  compile 'com.squareup.okhttp3:okhttp:3.4.1'
  compile 'com.google.code.gson:gson:2.7'
  testCompile 'org.json:json:20160810'
  testCompile 'org.testng:testng:6.9.12'
  testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1'
}

jar {
  def versionPropsFile = file('src/main/resources/version.properties')
  def parsedVersion

  /*Setting default value for versionBuild which is the last incremented value stored in the file */
  if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    parsedVersion = versionProps['VERSION']
  } else {
    throw new GradleException("Could not read version.properties!")
  }

  baseName = 'smartcar-sdk'
  version = parsedVersion
}

test {
  useTestNG()
  testLogging {
    // force logging the results on every run
    outputs.upToDateWhen {false}
    showExceptions = true
    exceptionFormat = 'full'
    showStackTraces = true
  }
  afterTest { desc, result -> 
      println "${result.resultType} ${desc.name}"
  }
}

jacoco {
  reportsDir = file("$buildDir/coverage")
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
  }
}
